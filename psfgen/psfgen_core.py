# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_psfgen_core', [dirname(__file__)])
        except ImportError:
            import _psfgen_core
            return _psfgen_core
        if fp is not None:
            try:
                _mod = imp.load_module('_psfgen_core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _psfgen_core = swig_import_helper()
    del swig_import_helper
else:
    import _psfgen_core
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def pdb_file_extract_residues(mol, file, h, all_caps, arg5, print_msg):
    """pdb_file_extract_residues(topo_mol * mol, FILE * file, stringhash * h, int all_caps, void * arg5, void (*)(void *,char const *) print_msg) -> int"""
    return _psfgen_core.pdb_file_extract_residues(mol, file, h, all_caps, arg5, print_msg)

def pdb_file_extract_coordinates(*args, **kwargs):
    """pdb_file_extract_coordinates(topo_mol * mol, FILE * file, FILE * namdbinfile, char const * segid, stringhash * h, int all_caps, void * arg7, void (*)(void *,char const *) print_msg) -> int"""
    return _psfgen_core.pdb_file_extract_coordinates(*args, **kwargs)

def psf_file_extract(*args, **kwargs):
    """psf_file_extract(topo_mol * mol, FILE * file, FILE * pdbfile, FILE * namdbinfile, FILE * velnamdbinfile, void * arg6, void (*)(void *,char const *) print_msg) -> int"""
    return _psfgen_core.psf_file_extract(*args, **kwargs)

def topo_defs_create():
    """topo_defs_create() -> topo_defs *"""
    return _psfgen_core.topo_defs_create()

def topo_defs_destroy(defs):
    """topo_defs_destroy(topo_defs * defs)"""
    return _psfgen_core.topo_defs_destroy(defs)

def topo_defs_error_handler(defs, arg2, print_msg):
    """topo_defs_error_handler(topo_defs * defs, void * arg2, void (*)(void *,char const *) print_msg)"""
    return _psfgen_core.topo_defs_error_handler(defs, arg2, print_msg)

def topo_defs_auto_angles(defs, autogen):
    """topo_defs_auto_angles(topo_defs * defs, int autogen)"""
    return _psfgen_core.topo_defs_auto_angles(defs, autogen)

def topo_defs_auto_dihedrals(defs, autogen):
    """topo_defs_auto_dihedrals(topo_defs * defs, int autogen)"""
    return _psfgen_core.topo_defs_auto_dihedrals(defs, autogen)

def topo_defs_type(defs, atype, element, mass, id):
    """topo_defs_type(topo_defs * defs, char const * atype, char const * element, double mass, int id) -> int"""
    return _psfgen_core.topo_defs_type(defs, atype, element, mass, id)

def topo_defs_residue(defs, rname, patch):
    """topo_defs_residue(topo_defs * defs, char const * rname, int patch) -> int"""
    return _psfgen_core.topo_defs_residue(defs, rname, patch)

def topo_defs_end(defs):
    """topo_defs_end(topo_defs * defs) -> int"""
    return _psfgen_core.topo_defs_end(defs)

def topo_defs_atom(defs, rname, _del, aname, ares, arel, atype, charge):
    """topo_defs_atom(topo_defs * defs, char const * rname, int _del, char const * aname, int ares, int arel, char const * atype, double charge) -> int"""
    return _psfgen_core.topo_defs_atom(defs, rname, _del, aname, ares, arel, atype, charge)

def topo_defs_bond(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel):
    """topo_defs_bond(topo_defs * defs, char const * rname, int _del, char const * a1name, int a1res, int a1rel, char const * a2name, int a2res, int a2rel) -> int"""
    return _psfgen_core.topo_defs_bond(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel)

def topo_defs_angle(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel):
    """topo_defs_angle(topo_defs * defs, char const * rname, int _del, char const * a1name, int a1res, int a1rel, char const * a2name, int a2res, int a2rel, char const * a3name, int a3res, int a3rel) -> int"""
    return _psfgen_core.topo_defs_angle(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel)

def topo_defs_dihedral(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel):
    """topo_defs_dihedral(topo_defs * defs, char const * rname, int _del, char const * a1name, int a1res, int a1rel, char const * a2name, int a2res, int a2rel, char const * a3name, int a3res, int a3rel, char const * a4name, int a4res, int a4rel) -> int"""
    return _psfgen_core.topo_defs_dihedral(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel)

def topo_defs_improper(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel):
    """topo_defs_improper(topo_defs * defs, char const * rname, int _del, char const * a1name, int a1res, int a1rel, char const * a2name, int a2res, int a2rel, char const * a3name, int a3res, int a3rel, char const * a4name, int a4res, int a4rel) -> int"""
    return _psfgen_core.topo_defs_improper(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel)

def topo_defs_cmap(defs, rname, _del, anamel, aresl, arell):
    """topo_defs_cmap(topo_defs * defs, char const * rname, int _del, char const *const [8] anamel, int const [8] aresl, int const [8] arell) -> int"""
    return _psfgen_core.topo_defs_cmap(defs, rname, _del, anamel, aresl, arell)

def topo_defs_exclusion(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel):
    """topo_defs_exclusion(topo_defs * defs, char const * rname, int _del, char const * a1name, int a1res, int a1rel, char const * a2name, int a2res, int a2rel) -> int"""
    return _psfgen_core.topo_defs_exclusion(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel)

def topo_defs_conformation(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel, dist12, angle123, dihedral, improper, angle234, dist34):
    """topo_defs_conformation(topo_defs * defs, char const * rname, int _del, char const * a1name, int a1res, int a1rel, char const * a2name, int a2res, int a2rel, char const * a3name, int a3res, int a3rel, char const * a4name, int a4res, int a4rel, double dist12, double angle123, double dihedral, int improper, double angle234, double dist34) -> int"""
    return _psfgen_core.topo_defs_conformation(defs, rname, _del, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel, dist12, angle123, dihedral, improper, angle234, dist34)

def topo_defs_default_patching_first(defs, pname):
    """topo_defs_default_patching_first(topo_defs * defs, char const * pname) -> int"""
    return _psfgen_core.topo_defs_default_patching_first(defs, pname)

def topo_defs_default_patching_last(defs, pname):
    """topo_defs_default_patching_last(topo_defs * defs, char const * pname) -> int"""
    return _psfgen_core.topo_defs_default_patching_last(defs, pname)

def topo_defs_patching_first(defs, rname, pname):
    """topo_defs_patching_first(topo_defs * defs, char const * rname, char const * pname) -> int"""
    return _psfgen_core.topo_defs_patching_first(defs, rname, pname)

def topo_defs_patching_last(defs, rname, pname):
    """topo_defs_patching_last(topo_defs * defs, char const * rname, char const * pname) -> int"""
    return _psfgen_core.topo_defs_patching_last(defs, rname, pname)

def topo_defs_add_topofile(defs, filename):
    """topo_defs_add_topofile(topo_defs * defs, char const * filename) -> int"""
    return _psfgen_core.topo_defs_add_topofile(defs, filename)

def topo_mol_create(defs):
    """topo_mol_create(topo_defs * defs) -> topo_mol *"""
    return _psfgen_core.topo_mol_create(defs)

def topo_mol_destroy(mol):
    """topo_mol_destroy(topo_mol * mol)"""
    return _psfgen_core.topo_mol_destroy(mol)

def topo_mol_error_handler(mol, arg2, print_msg):
    """topo_mol_error_handler(topo_mol * mol, void * arg2, void (*)(void *,char const *) print_msg)"""
    return _psfgen_core.topo_mol_error_handler(mol, arg2, print_msg)

def topo_mol_segment(mol, segid):
    """topo_mol_segment(topo_mol * mol, char const * segid) -> int"""
    return _psfgen_core.topo_mol_segment(mol, segid)

def topo_mol_segment_first(mol, rname):
    """topo_mol_segment_first(topo_mol * mol, char const * rname) -> int"""
    return _psfgen_core.topo_mol_segment_first(mol, rname)

def topo_mol_segment_last(mol, rname):
    """topo_mol_segment_last(topo_mol * mol, char const * rname) -> int"""
    return _psfgen_core.topo_mol_segment_last(mol, rname)

def topo_mol_segment_auto_angles(mol, autogen):
    """topo_mol_segment_auto_angles(topo_mol * mol, int autogen) -> int"""
    return _psfgen_core.topo_mol_segment_auto_angles(mol, autogen)

def topo_mol_segment_auto_dihedrals(mol, autogen):
    """topo_mol_segment_auto_dihedrals(topo_mol * mol, int autogen) -> int"""
    return _psfgen_core.topo_mol_segment_auto_dihedrals(mol, autogen)

def topo_mol_residue(mol, resid, rname, chain):
    """topo_mol_residue(topo_mol * mol, char const * resid, char const * rname, char const * chain) -> int"""
    return _psfgen_core.topo_mol_residue(mol, resid, rname, chain)

def topo_mol_mutate(mol, resid, rname):
    """topo_mol_mutate(topo_mol * mol, char const * resid, char const * rname) -> int"""
    return _psfgen_core.topo_mol_mutate(mol, resid, rname)

def topo_mol_end(mol):
    """topo_mol_end(topo_mol * mol) -> int"""
    return _psfgen_core.topo_mol_end(mol)
class topo_mol_ident_t(_object):
    """Proxy of C topo_mol_ident_t struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, topo_mol_ident_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, topo_mol_ident_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segid"] = _psfgen_core.topo_mol_ident_t_segid_set
    __swig_getmethods__["segid"] = _psfgen_core.topo_mol_ident_t_segid_get
    if _newclass:
        segid = _swig_property(_psfgen_core.topo_mol_ident_t_segid_get, _psfgen_core.topo_mol_ident_t_segid_set)
    __swig_setmethods__["resid"] = _psfgen_core.topo_mol_ident_t_resid_set
    __swig_getmethods__["resid"] = _psfgen_core.topo_mol_ident_t_resid_get
    if _newclass:
        resid = _swig_property(_psfgen_core.topo_mol_ident_t_resid_get, _psfgen_core.topo_mol_ident_t_resid_set)
    __swig_setmethods__["aname"] = _psfgen_core.topo_mol_ident_t_aname_set
    __swig_getmethods__["aname"] = _psfgen_core.topo_mol_ident_t_aname_get
    if _newclass:
        aname = _swig_property(_psfgen_core.topo_mol_ident_t_aname_get, _psfgen_core.topo_mol_ident_t_aname_set)

    def __init__(self):
        """__init__(topo_mol_ident_t self) -> topo_mol_ident_t"""
        this = _psfgen_core.new_topo_mol_ident_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _psfgen_core.delete_topo_mol_ident_t
    __del__ = lambda self: None
topo_mol_ident_t_swigregister = _psfgen_core.topo_mol_ident_t_swigregister
topo_mol_ident_t_swigregister(topo_mol_ident_t)


def topo_mol_patch(mol, targets, rname, prepend, warn_angles, warn_dihedrals, deflt):
    """topo_mol_patch(topo_mol * mol, topo_mol_ident_t targets, char const * rname, int prepend, int warn_angles, int warn_dihedrals, int deflt) -> int"""
    return _psfgen_core.topo_mol_patch(mol, targets, rname, prepend, warn_angles, warn_dihedrals, deflt)

def topo_mol_regenerate_angles(mol):
    """topo_mol_regenerate_angles(topo_mol * mol) -> int"""
    return _psfgen_core.topo_mol_regenerate_angles(mol)

def topo_mol_regenerate_dihedrals(mol):
    """topo_mol_regenerate_dihedrals(topo_mol * mol) -> int"""
    return _psfgen_core.topo_mol_regenerate_dihedrals(mol)

def topo_mol_regenerate_resids(mol):
    """topo_mol_regenerate_resids(topo_mol * mol) -> int"""
    return _psfgen_core.topo_mol_regenerate_resids(mol)

def topo_mol_delete_atom(mol, target):
    """topo_mol_delete_atom(topo_mol * mol, topo_mol_ident_t target)"""
    return _psfgen_core.topo_mol_delete_atom(mol, target)

def topo_mol_set_name(mol, target, name):
    """topo_mol_set_name(topo_mol * mol, topo_mol_ident_t target, char const * name) -> int"""
    return _psfgen_core.topo_mol_set_name(mol, target, name)

def topo_mol_set_resname(mol, target, rname):
    """topo_mol_set_resname(topo_mol * mol, topo_mol_ident_t target, char const * rname) -> int"""
    return _psfgen_core.topo_mol_set_resname(mol, target, rname)

def topo_mol_set_segid(mol, target, segid):
    """topo_mol_set_segid(topo_mol * mol, topo_mol_ident_t target, char const * segid) -> int"""
    return _psfgen_core.topo_mol_set_segid(mol, target, segid)

def topo_mol_multiply_atoms(mol, targets, ncopies):
    """topo_mol_multiply_atoms(topo_mol * mol, topo_mol_ident_t targets, int ncopies) -> int"""
    return _psfgen_core.topo_mol_multiply_atoms(mol, targets, ncopies)

def topo_mol_set_element(mol, target, element, replace):
    """topo_mol_set_element(topo_mol * mol, topo_mol_ident_t target, char const * element, int replace) -> int"""
    return _psfgen_core.topo_mol_set_element(mol, target, element, replace)

def topo_mol_set_chain(mol, target, chain, replace):
    """topo_mol_set_chain(topo_mol * mol, topo_mol_ident_t target, char const * chain, int replace) -> int"""
    return _psfgen_core.topo_mol_set_chain(mol, target, chain, replace)

def topo_mol_set_xyz(mol, target, x, y, z):
    """topo_mol_set_xyz(topo_mol * mol, topo_mol_ident_t target, double x, double y, double z) -> int"""
    return _psfgen_core.topo_mol_set_xyz(mol, target, x, y, z)

def topo_mol_set_vel(mol, target, vx, vy, vz):
    """topo_mol_set_vel(topo_mol * mol, topo_mol_ident_t target, double vx, double vy, double vz) -> int"""
    return _psfgen_core.topo_mol_set_vel(mol, target, vx, vy, vz)

def topo_mol_set_mass(mol, target, mass):
    """topo_mol_set_mass(topo_mol * mol, topo_mol_ident_t target, double mass) -> int"""
    return _psfgen_core.topo_mol_set_mass(mol, target, mass)

def topo_mol_set_charge(mol, target, charge):
    """topo_mol_set_charge(topo_mol * mol, topo_mol_ident_t target, double charge) -> int"""
    return _psfgen_core.topo_mol_set_charge(mol, target, charge)

def topo_mol_set_bfactor(mol, target, bfactor):
    """topo_mol_set_bfactor(topo_mol * mol, topo_mol_ident_t target, double bfactor) -> int"""
    return _psfgen_core.topo_mol_set_bfactor(mol, target, bfactor)

def topo_mol_guess_xyz(mol):
    """topo_mol_guess_xyz(topo_mol * mol) -> int"""
    return _psfgen_core.topo_mol_guess_xyz(mol)

def topo_mol_add_patch(mol, pname, deflt):
    """topo_mol_add_patch(topo_mol * mol, char const * pname, int deflt) -> int"""
    return _psfgen_core.topo_mol_add_patch(mol, pname, deflt)

def topo_mol_add_patchres(mol, targets):
    """topo_mol_add_patchres(topo_mol * mol, topo_mol_ident_t targets) -> int"""
    return _psfgen_core.topo_mol_add_patchres(mol, targets)

def topo_mol_validate_patchres(mol, pname, segid, resid):
    """topo_mol_validate_patchres(topo_mol * mol, char const * pname, char const * segid, char const * resid) -> int"""
    return _psfgen_core.topo_mol_validate_patchres(mol, pname, segid, resid)

def topo_mol_write_pdb(mol, file, arg3, print_msg):
    """topo_mol_write_pdb(topo_mol * mol, FILE * file, void * arg3, void (*)(void *,char const *) print_msg) -> int"""
    return _psfgen_core.topo_mol_write_pdb(mol, file, arg3, print_msg)

def topo_mol_write_namdbin(mol, file, velfile, arg4, print_msg):
    """topo_mol_write_namdbin(topo_mol * mol, FILE * file, FILE * velfile, void * arg4, void (*)(void *,char const *) print_msg) -> int"""
    return _psfgen_core.topo_mol_write_namdbin(mol, file, velfile, arg4, print_msg)

def topo_mol_write_psf(mol, file, charmmfmt, nocmap, nopatches, arg6, print_msg):
    """topo_mol_write_psf(topo_mol * mol, FILE * file, int charmmfmt, int nocmap, int nopatches, void * arg6, void (*)(void *,char const *) print_msg) -> int"""
    return _psfgen_core.topo_mol_write_psf(mol, file, charmmfmt, nocmap, nopatches, arg6, print_msg)

def charmm_parse_topo_defs(defs, file, all_caps, v, print_msg):
    """charmm_parse_topo_defs(topo_defs * defs, FILE * file, int all_caps, void * v, void (*)(void *,char const *) print_msg) -> int"""
    return _psfgen_core.charmm_parse_topo_defs(defs, file, all_caps, v, print_msg)

def stringhash_create():
    """stringhash_create() -> stringhash *"""
    return _psfgen_core.stringhash_create()

def stringhash_destroy(h):
    """stringhash_destroy(stringhash * h)"""
    return _psfgen_core.stringhash_destroy(h)

def stringhash_insert(h, key, data):
    """stringhash_insert(stringhash * h, char const * key, char const * data) -> char const *"""
    return _psfgen_core.stringhash_insert(h, key, data)

_psfgen_core.STRINGHASH_FAIL_swigconstant(_psfgen_core)
STRINGHASH_FAIL = _psfgen_core.STRINGHASH_FAIL

def stringhash_lookup(h, key):
    """stringhash_lookup(stringhash * h, char const * key) -> char const *"""
    return _psfgen_core.stringhash_lookup(h, key)

def stringhash_delete(h, key):
    """stringhash_delete(stringhash * h, char const * key) -> char const *"""
    return _psfgen_core.stringhash_delete(h, key)

_psfgen_core.EXTRACT_ALIAS_FAIL_swigconstant(_psfgen_core)
EXTRACT_ALIAS_FAIL = _psfgen_core.EXTRACT_ALIAS_FAIL

def extract_alias_residue_define(h, altres, realres):
    """extract_alias_residue_define(stringhash * h, char const * altres, char const * realres) -> int"""
    return _psfgen_core.extract_alias_residue_define(h, altres, realres)

def extract_alias_atom_define(h, resname, altatom, realatom):
    """extract_alias_atom_define(stringhash * h, char const * resname, char const * altatom, char const * realatom) -> int"""
    return _psfgen_core.extract_alias_atom_define(h, resname, altatom, realatom)

def extract_alias_residue_check(h, resname):
    """extract_alias_residue_check(stringhash * h, char const * resname) -> char const *"""
    return _psfgen_core.extract_alias_residue_check(h, resname)

def extract_alias_atom_check(h, resname, atomname):
    """extract_alias_atom_check(stringhash * h, char const * resname, char const * atomname) -> char const *"""
    return _psfgen_core.extract_alias_atom_check(h, resname, atomname)

def fopen(arg1, arg2):
    """fopen(char const * arg1, char const * arg2) -> FILE *"""
    return _psfgen_core.fopen(arg1, arg2)

def fclose(arg1):
    """fclose(FILE * arg1) -> int"""
    return _psfgen_core.fclose(arg1)
# This file is compatible with both classic and new-style classes.


