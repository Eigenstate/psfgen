# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_psfgen_core', [dirname(__file__)])
        except ImportError:
            import _psfgen_core
            return _psfgen_core
        if fp is not None:
            try:
                _mod = imp.load_module('_psfgen_core', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _psfgen_core = swig_import_helper()
    del swig_import_helper
else:
    import _psfgen_core
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def pdb_file_extract_residues(mol, file, h, all_caps, arg5, print_msg):
    return _psfgen_core.pdb_file_extract_residues(mol, file, h, all_caps, arg5, print_msg)
pdb_file_extract_residues = _psfgen_core.pdb_file_extract_residues

def pdb_file_extract_coordinates(mol, file, namdbinfile, segid, h, all_caps, arg7, print_msg):
    return _psfgen_core.pdb_file_extract_coordinates(mol, file, namdbinfile, segid, h, all_caps, arg7, print_msg)
pdb_file_extract_coordinates = _psfgen_core.pdb_file_extract_coordinates

def psf_file_extract(mol, file, pdbfile, namdbinfile, velnamdbinfile, arg6, print_msg):
    return _psfgen_core.psf_file_extract(mol, file, pdbfile, namdbinfile, velnamdbinfile, arg6, print_msg)
psf_file_extract = _psfgen_core.psf_file_extract

def topo_defs_create():
    return _psfgen_core.topo_defs_create()
topo_defs_create = _psfgen_core.topo_defs_create

def topo_defs_destroy(defs):
    return _psfgen_core.topo_defs_destroy(defs)
topo_defs_destroy = _psfgen_core.topo_defs_destroy

def topo_defs_error_handler(defs, arg2, print_msg):
    return _psfgen_core.topo_defs_error_handler(defs, arg2, print_msg)
topo_defs_error_handler = _psfgen_core.topo_defs_error_handler

def topo_defs_auto_angles(defs, autogen):
    return _psfgen_core.topo_defs_auto_angles(defs, autogen)
topo_defs_auto_angles = _psfgen_core.topo_defs_auto_angles

def topo_defs_auto_dihedrals(defs, autogen):
    return _psfgen_core.topo_defs_auto_dihedrals(defs, autogen)
topo_defs_auto_dihedrals = _psfgen_core.topo_defs_auto_dihedrals

def topo_defs_type(defs, atype, element, mass, id):
    return _psfgen_core.topo_defs_type(defs, atype, element, mass, id)
topo_defs_type = _psfgen_core.topo_defs_type

def topo_defs_residue(defs, rname, patch):
    return _psfgen_core.topo_defs_residue(defs, rname, patch)
topo_defs_residue = _psfgen_core.topo_defs_residue

def topo_defs_end(defs):
    return _psfgen_core.topo_defs_end(defs)
topo_defs_end = _psfgen_core.topo_defs_end

def topo_defs_atom(defs, rname, arg3, aname, ares, arel, atype, charge):
    return _psfgen_core.topo_defs_atom(defs, rname, arg3, aname, ares, arel, atype, charge)
topo_defs_atom = _psfgen_core.topo_defs_atom

def topo_defs_bond(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel):
    return _psfgen_core.topo_defs_bond(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel)
topo_defs_bond = _psfgen_core.topo_defs_bond

def topo_defs_angle(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel):
    return _psfgen_core.topo_defs_angle(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel)
topo_defs_angle = _psfgen_core.topo_defs_angle

def topo_defs_dihedral(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel):
    return _psfgen_core.topo_defs_dihedral(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel)
topo_defs_dihedral = _psfgen_core.topo_defs_dihedral

def topo_defs_improper(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel):
    return _psfgen_core.topo_defs_improper(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel)
topo_defs_improper = _psfgen_core.topo_defs_improper

def topo_defs_cmap(defs, rname, arg3, anamel, aresl, arell):
    return _psfgen_core.topo_defs_cmap(defs, rname, arg3, anamel, aresl, arell)
topo_defs_cmap = _psfgen_core.topo_defs_cmap

def topo_defs_exclusion(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel):
    return _psfgen_core.topo_defs_exclusion(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel)
topo_defs_exclusion = _psfgen_core.topo_defs_exclusion

def topo_defs_conformation(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel, dist12, angle123, dihedral, improper, angle234, dist34):
    return _psfgen_core.topo_defs_conformation(defs, rname, arg3, a1name, a1res, a1rel, a2name, a2res, a2rel, a3name, a3res, a3rel, a4name, a4res, a4rel, dist12, angle123, dihedral, improper, angle234, dist34)
topo_defs_conformation = _psfgen_core.topo_defs_conformation

def topo_defs_default_patching_first(defs, pname):
    return _psfgen_core.topo_defs_default_patching_first(defs, pname)
topo_defs_default_patching_first = _psfgen_core.topo_defs_default_patching_first

def topo_defs_default_patching_last(defs, pname):
    return _psfgen_core.topo_defs_default_patching_last(defs, pname)
topo_defs_default_patching_last = _psfgen_core.topo_defs_default_patching_last

def topo_defs_patching_first(defs, rname, pname):
    return _psfgen_core.topo_defs_patching_first(defs, rname, pname)
topo_defs_patching_first = _psfgen_core.topo_defs_patching_first

def topo_defs_patching_last(defs, rname, pname):
    return _psfgen_core.topo_defs_patching_last(defs, rname, pname)
topo_defs_patching_last = _psfgen_core.topo_defs_patching_last

def topo_defs_add_topofile(defs, filename):
    return _psfgen_core.topo_defs_add_topofile(defs, filename)
topo_defs_add_topofile = _psfgen_core.topo_defs_add_topofile

def topo_mol_create(defs):
    return _psfgen_core.topo_mol_create(defs)
topo_mol_create = _psfgen_core.topo_mol_create

def topo_mol_destroy(mol):
    return _psfgen_core.topo_mol_destroy(mol)
topo_mol_destroy = _psfgen_core.topo_mol_destroy

def topo_mol_error_handler(mol, arg2, print_msg):
    return _psfgen_core.topo_mol_error_handler(mol, arg2, print_msg)
topo_mol_error_handler = _psfgen_core.topo_mol_error_handler

def topo_mol_segment(mol, segid):
    return _psfgen_core.topo_mol_segment(mol, segid)
topo_mol_segment = _psfgen_core.topo_mol_segment

def topo_mol_segment_first(mol, rname):
    return _psfgen_core.topo_mol_segment_first(mol, rname)
topo_mol_segment_first = _psfgen_core.topo_mol_segment_first

def topo_mol_segment_last(mol, rname):
    return _psfgen_core.topo_mol_segment_last(mol, rname)
topo_mol_segment_last = _psfgen_core.topo_mol_segment_last

def topo_mol_segment_auto_angles(mol, autogen):
    return _psfgen_core.topo_mol_segment_auto_angles(mol, autogen)
topo_mol_segment_auto_angles = _psfgen_core.topo_mol_segment_auto_angles

def topo_mol_segment_auto_dihedrals(mol, autogen):
    return _psfgen_core.topo_mol_segment_auto_dihedrals(mol, autogen)
topo_mol_segment_auto_dihedrals = _psfgen_core.topo_mol_segment_auto_dihedrals

def topo_mol_residue(mol, resid, rname, chain):
    return _psfgen_core.topo_mol_residue(mol, resid, rname, chain)
topo_mol_residue = _psfgen_core.topo_mol_residue

def topo_mol_mutate(mol, resid, rname):
    return _psfgen_core.topo_mol_mutate(mol, resid, rname)
topo_mol_mutate = _psfgen_core.topo_mol_mutate

def topo_mol_end(mol):
    return _psfgen_core.topo_mol_end(mol)
topo_mol_end = _psfgen_core.topo_mol_end
class topo_mol_ident_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, topo_mol_ident_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, topo_mol_ident_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segid"] = _psfgen_core.topo_mol_ident_t_segid_set
    __swig_getmethods__["segid"] = _psfgen_core.topo_mol_ident_t_segid_get
    if _newclass:
        segid = _swig_property(_psfgen_core.topo_mol_ident_t_segid_get, _psfgen_core.topo_mol_ident_t_segid_set)
    __swig_setmethods__["resid"] = _psfgen_core.topo_mol_ident_t_resid_set
    __swig_getmethods__["resid"] = _psfgen_core.topo_mol_ident_t_resid_get
    if _newclass:
        resid = _swig_property(_psfgen_core.topo_mol_ident_t_resid_get, _psfgen_core.topo_mol_ident_t_resid_set)
    __swig_setmethods__["aname"] = _psfgen_core.topo_mol_ident_t_aname_set
    __swig_getmethods__["aname"] = _psfgen_core.topo_mol_ident_t_aname_get
    if _newclass:
        aname = _swig_property(_psfgen_core.topo_mol_ident_t_aname_get, _psfgen_core.topo_mol_ident_t_aname_set)

    def __init__(self):
        this = _psfgen_core.new_topo_mol_ident_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _psfgen_core.delete_topo_mol_ident_t
    __del__ = lambda self: None
topo_mol_ident_t_swigregister = _psfgen_core.topo_mol_ident_t_swigregister
topo_mol_ident_t_swigregister(topo_mol_ident_t)


def topo_mol_patch(mol, targets, rname, prepend, warn_angles, warn_dihedrals, deflt):
    return _psfgen_core.topo_mol_patch(mol, targets, rname, prepend, warn_angles, warn_dihedrals, deflt)
topo_mol_patch = _psfgen_core.topo_mol_patch

def topo_mol_regenerate_angles(mol):
    return _psfgen_core.topo_mol_regenerate_angles(mol)
topo_mol_regenerate_angles = _psfgen_core.topo_mol_regenerate_angles

def topo_mol_regenerate_dihedrals(mol):
    return _psfgen_core.topo_mol_regenerate_dihedrals(mol)
topo_mol_regenerate_dihedrals = _psfgen_core.topo_mol_regenerate_dihedrals

def topo_mol_regenerate_resids(mol):
    return _psfgen_core.topo_mol_regenerate_resids(mol)
topo_mol_regenerate_resids = _psfgen_core.topo_mol_regenerate_resids

def topo_mol_delete_atom(mol, target):
    return _psfgen_core.topo_mol_delete_atom(mol, target)
topo_mol_delete_atom = _psfgen_core.topo_mol_delete_atom

def topo_mol_set_name(mol, target, name):
    return _psfgen_core.topo_mol_set_name(mol, target, name)
topo_mol_set_name = _psfgen_core.topo_mol_set_name

def topo_mol_set_resname(mol, target, rname):
    return _psfgen_core.topo_mol_set_resname(mol, target, rname)
topo_mol_set_resname = _psfgen_core.topo_mol_set_resname

def topo_mol_set_segid(mol, target, segid):
    return _psfgen_core.topo_mol_set_segid(mol, target, segid)
topo_mol_set_segid = _psfgen_core.topo_mol_set_segid

def topo_mol_multiply_atoms(mol, targets, ncopies):
    return _psfgen_core.topo_mol_multiply_atoms(mol, targets, ncopies)
topo_mol_multiply_atoms = _psfgen_core.topo_mol_multiply_atoms

def topo_mol_set_element(mol, target, element, replace):
    return _psfgen_core.topo_mol_set_element(mol, target, element, replace)
topo_mol_set_element = _psfgen_core.topo_mol_set_element

def topo_mol_set_chain(mol, target, chain, replace):
    return _psfgen_core.topo_mol_set_chain(mol, target, chain, replace)
topo_mol_set_chain = _psfgen_core.topo_mol_set_chain

def topo_mol_set_xyz(mol, target, x, y, z):
    return _psfgen_core.topo_mol_set_xyz(mol, target, x, y, z)
topo_mol_set_xyz = _psfgen_core.topo_mol_set_xyz

def topo_mol_set_vel(mol, target, vx, vy, vz):
    return _psfgen_core.topo_mol_set_vel(mol, target, vx, vy, vz)
topo_mol_set_vel = _psfgen_core.topo_mol_set_vel

def topo_mol_set_mass(mol, target, mass):
    return _psfgen_core.topo_mol_set_mass(mol, target, mass)
topo_mol_set_mass = _psfgen_core.topo_mol_set_mass

def topo_mol_set_charge(mol, target, charge):
    return _psfgen_core.topo_mol_set_charge(mol, target, charge)
topo_mol_set_charge = _psfgen_core.topo_mol_set_charge

def topo_mol_set_bfactor(mol, target, bfactor):
    return _psfgen_core.topo_mol_set_bfactor(mol, target, bfactor)
topo_mol_set_bfactor = _psfgen_core.topo_mol_set_bfactor

def topo_mol_guess_xyz(mol):
    return _psfgen_core.topo_mol_guess_xyz(mol)
topo_mol_guess_xyz = _psfgen_core.topo_mol_guess_xyz

def topo_mol_add_patch(mol, pname, deflt):
    return _psfgen_core.topo_mol_add_patch(mol, pname, deflt)
topo_mol_add_patch = _psfgen_core.topo_mol_add_patch

def topo_mol_add_patchres(mol, targets):
    return _psfgen_core.topo_mol_add_patchres(mol, targets)
topo_mol_add_patchres = _psfgen_core.topo_mol_add_patchres

def topo_mol_validate_patchres(mol, pname, segid, resid):
    return _psfgen_core.topo_mol_validate_patchres(mol, pname, segid, resid)
topo_mol_validate_patchres = _psfgen_core.topo_mol_validate_patchres

def topo_mol_write_pdb(mol, file, arg3, print_msg):
    return _psfgen_core.topo_mol_write_pdb(mol, file, arg3, print_msg)
topo_mol_write_pdb = _psfgen_core.topo_mol_write_pdb

def topo_mol_write_namdbin(mol, file, velfile, arg4, print_msg):
    return _psfgen_core.topo_mol_write_namdbin(mol, file, velfile, arg4, print_msg)
topo_mol_write_namdbin = _psfgen_core.topo_mol_write_namdbin

def topo_mol_write_psf(mol, file, charmmfmt, nocmap, nopatches, arg6, print_msg):
    return _psfgen_core.topo_mol_write_psf(mol, file, charmmfmt, nocmap, nopatches, arg6, print_msg)
topo_mol_write_psf = _psfgen_core.topo_mol_write_psf

def charmm_parse_topo_defs(defs, file, all_caps, v, print_msg):
    return _psfgen_core.charmm_parse_topo_defs(defs, file, all_caps, v, print_msg)
charmm_parse_topo_defs = _psfgen_core.charmm_parse_topo_defs

def stringhash_create():
    return _psfgen_core.stringhash_create()
stringhash_create = _psfgen_core.stringhash_create

def stringhash_destroy(h):
    return _psfgen_core.stringhash_destroy(h)
stringhash_destroy = _psfgen_core.stringhash_destroy

def stringhash_insert(h, key, data):
    return _psfgen_core.stringhash_insert(h, key, data)
stringhash_insert = _psfgen_core.stringhash_insert

_psfgen_core.STRINGHASH_FAIL_swigconstant(_psfgen_core)
STRINGHASH_FAIL = _psfgen_core.STRINGHASH_FAIL

def stringhash_lookup(h, key):
    return _psfgen_core.stringhash_lookup(h, key)
stringhash_lookup = _psfgen_core.stringhash_lookup

def stringhash_delete(h, key):
    return _psfgen_core.stringhash_delete(h, key)
stringhash_delete = _psfgen_core.stringhash_delete

_psfgen_core.EXTRACT_ALIAS_FAIL_swigconstant(_psfgen_core)
EXTRACT_ALIAS_FAIL = _psfgen_core.EXTRACT_ALIAS_FAIL

def extract_alias_residue_define(h, altres, realres):
    return _psfgen_core.extract_alias_residue_define(h, altres, realres)
extract_alias_residue_define = _psfgen_core.extract_alias_residue_define

def extract_alias_atom_define(h, resname, altatom, realatom):
    return _psfgen_core.extract_alias_atom_define(h, resname, altatom, realatom)
extract_alias_atom_define = _psfgen_core.extract_alias_atom_define

def extract_alias_residue_check(h, resname):
    return _psfgen_core.extract_alias_residue_check(h, resname)
extract_alias_residue_check = _psfgen_core.extract_alias_residue_check

def extract_alias_atom_check(h, resname, atomname):
    return _psfgen_core.extract_alias_atom_check(h, resname, atomname)
extract_alias_atom_check = _psfgen_core.extract_alias_atom_check

def fopen(arg1, arg2):
    return _psfgen_core.fopen(arg1, arg2)
fopen = _psfgen_core.fopen

def fclose(arg1):
    return _psfgen_core.fclose(arg1)
fclose = _psfgen_core.fclose
# This file is compatible with both classic and new-style classes.


